# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: gradle test

on:
  # any pull request
  pull_request:
  # any push to master
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  # this test is a heavily modified version of the official gradle test so that it runs each test in parallel and then
  # aggregates the results all in github actions
  saveGradleCacheAndDaemon:
    name: Save Gradle Cache and Daemon
    # this part caches gradle, gradle wrapper, gradle cache, and the gradle daemon so that it doesn't have to download
    # them for each job
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-java@v1
          with:
            java-version: 11
            distribution: 'temurin'
        - name: Setup Gradle
          uses: gradle/gradle-build-action@v2
          with:
            arguments: wrapper
  classes:
    needs: saveGradleCacheAndDaemon
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          distribution: 'temurin'
      - name: Gradle Classes
        uses: gradle/gradle-build-action@v2
        with:
          arguments: classes
      - name: Upload classes
        uses: actions/upload-artifact@v2
        with:
          name: classes
          path: build/classes/**/main
  testClasses:
    needs: [saveGradleCacheAndDaemon, classes]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          distribution: 'temurin'
      - name: download classes
        uses: actions/download-artifact@v2
        with:
          name: classes
          path: build/classes
      - name: Gradle Test Classes
        uses: gradle/gradle-build-action@v2
        with:
          arguments: testClasses
      - name: Upload test classes
        uses: actions/upload-artifact@v2
        with:
          name: testClasses
          #upload both the java test classes and the kotlin test classes
          path: build/classes/**/test
  javadoc:
    needs: [saveGradleCacheAndDaemon, classes, testClasses]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
          distribution: 'temurin'
      - name: download classes
        uses: actions/download-artifact@v2
        with:
          name: classes
          path: build/classes
      - name: Gradle Javadoc
        uses: gradle/gradle-build-action@v2
        with:
          arguments: javadoc
      - name: Upload javadoc
        uses: actions/upload-artifact@v2
        with:
          name: javadoc
          path: build/docs/javadoc
  javadocToGitHubPages:
    needs:
      javadoc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: download javadoc
        uses: actions/download-artifact@v2
        with:
          name: javadoc
          path: build/docs/javadoc
      - name: upload to gh-pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/docs/javadoc
          publish_branch: gh-pages
  get-tests:
    runs-on: ubuntu-latest
    needs: [saveGradleCacheAndDaemon, classes, testClasses]
    steps:
      - uses: actions/checkout@v3 # checkout the repo
      - name: Set up JDK 11 # set up java 11
        uses: actions/setup-java@v3 # use the setup-java action
        with:
          java-version: '11' # we want java 11
          distribution: 'temurin' # we want temurin because frc uses it
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew # make gradlew executable
      - name: Download classes
        uses: actions/download-artifact@v2
        with:
          name: classes
          path: |
            build/classes/java/main
            build/classes/kotlin/main
      - name: Download test classes
        uses: actions/download-artifact@v2
        with:
          name: testClasses
          path: |
            build/classes/java/test
            build/classes/kotlin/test
      - name: Get tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: getTests
      - name: Upload tests
        # upload the tests.txt file as an artifact (which is a file that can be downloaded)
        uses: actions/upload-artifact@v3
        with:
          name: tests # name the artifact tests
          path: tests.json # upload the tests.json file
      # we also neet to output the file so that the next job can use it
      - name: Set output # also read the tests.json file and cat the github action output
        id: testid
        run: echo "tests=$(cat tests.json)" >> $GITHUB_OUTPUT; cat $GITHUB_OUTPUT
      - name: read output # read the output
        run: echo ${{ steps.testid.outputs.tests }}
    outputs:
      tests: ${{ steps.testid.outputs.tests }}

  test:
    needs: [saveGradleCacheAndDaemon, classes, testClasses, get-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{ fromJSON(needs.get-tests.outputs.tests) }} # get the tests from the previous job
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Download classes
        uses: actions/download-artifact@v2
        with:
          name: classes
          path: |
            build/classes/java/main
            build/classes/kotlin/main
      - name: Download test classes
        uses: actions/download-artifact@v2
        with:
          name: testClasses
          path: |
            build/classes/java/test
            build/classes/kotlin/test
      - name: Run tests
        # if it fails, this task should fail
        # if it skips, this task should skip
        # if it passes, this task should pass

        run: ./gradlew test --tests ${{ matrix.test }} --continue
        continue-on-error: true
      - name: handle errors, skips, and passes
        # if the test failed, we want the job to fail
        # if the test skipped, we want the job to skip
        # if the test passed, we want the job to pass
        run: |
          if grep -q "FAILED" build/test-results/test/TEST-*.xml; then
            echo "::error::Test failed" # ::error:: is a special string that makes the job fail
            exit 1 # exit with a non-zero exit code
          elif grep -q "SKIPPED" build/test-results/test/TEST-*.xml; then
            echo "::warning::Test skipped" # ::warning:: is a special string that doesnt make the job skip but makes it 
              # yellow
            exit 78 # exit code for skipped
          else
            echo "::success::Test passed"
            exit 0 # exit with a zero exit code
          fi
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/test-results
permissions:
  contents: read
