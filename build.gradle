//file:noinspection DependencyNotationArgument
import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

import java.util.jar.JarFile

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2022.4.1"
    id "org.jetbrains.kotlin.jvm" version "1.6.10"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    //noinspection GroovyAssignabilityCheck
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}
def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
//noinspection GroovyAssignabilityCheck, GroovyAccessibility
wpi.java.debugJni = false

// Set this to true to enable desktop support.
//noinspection GroovyUnusedAssignment
def includeDesktopSupport = true

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

//    testImplementation 'junit:junit:4.12'
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
}

// Simulation configuration (e.g. environment variables).
//noinspection GroovyAssignabilityCheck,GroovyAccessibility
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    //noinspection UnnecessaryQualifiedReference
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


// get all test classes command
tasks.register('getTests') {
    doLast {
        def testClasses = []
        // get all test classes
        configurations.testRuntimeClasspath.each { file -> // iterate over all files in the test runtime classpath
            if (file.name.endsWith(".jar")) { // if it's a jar file
                def jar = new JarFile(file) // open the jar file
                jar.entries().each { entry -> // iterate over all entries in the jar file
                    if (entry.name.endsWith("Test.class")) { // if it's a test class
                        // add the test class to the list
                        testClasses << entry.name.replace("/", ".").replace(".class", "")
                    }
                }
            }
        }

        // put test classes in tests.txt
        def file = new File("tests.txt")
        // clear file
        file.delete()
        // convert to json and write to file
        file.write(testClasses.toString())
    }
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

repositories {
    mavenCentral()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
